---
layout: post
title: "数据结构中树的介绍"
---
树是一种在实际编程中经常遇到的数据结构。它的逻辑很简单：除了根节点之外每个节点只有一个父节点，根节点没有父节点；除了叶节点之外所有的节点都有一个或多个子节点，叶节点没有子节点。通常树有如下几种遍历方式：  

- 前序遍历：先访问根节点，再访问左子节点，最后访问右子节点。  
- 中序遍历：先访问左子节点，再访问根节点，最后访问右子节点。  
- 后序遍历：先访问左子节点，再访问右子节点，最后访问根节点。  
- 宽度优先遍历：先访问数的第一层节点，再访问树的第二层节点......一直到访问到最下面一层节点。在同一层节点中，以从左到右的顺序依次访问。  

二叉树右很多特例，二叉搜索树就是其中的一种。在二叉搜索树中，左子节点总是小于或等于根节点，而右子节点总是大于或等于根节点。  
二叉树的另外两个特例是堆和红黑树。堆分为最大堆和最小堆。在最大堆中根节点的值最大，在最小堆中根节点的值最小。有很多需要快速找到最大值或者最小值的问题都可以用堆来解决。红黑树是把树中的节点定义为红、黑两种颜色，并通过规则确保从根节点到叶节点的最长路径的长度不超过最短路径的两倍。
